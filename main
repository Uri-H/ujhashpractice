import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.util.Scanner; // Import the Scanner class to read text files
import java.io.*; 
import java.util.*; 
import java.util.ArrayList;

public class ReadFile {
	public static void main(String[] args) {
    	File myObj = new File("pizzaInfo.txt");
    	String[][] b = ReadFileHere(myObj);
    	//for(int i=0;i<3;i++) {
    	//	for(int j=0;j<3;j++) {
    	//		System.out.println(b[i][j]);
    			
    	//	}
    	//}
    	System.out.println("Hi");
    }
	
	public static String[][] ReadFileHere(File myObj){
	int count = 0;
	int max = 0;
	int numberOfPizzas;
	String[][] pizzaData= new String[0][0];
    try {
      //File myObj = new File("pizzaInfo.txt");
      Scanner myReader = new Scanner(myObj);
      String firstLine = myReader.nextLine();
      //int pizzas = Character.getNumericValue(firstLine.charAt(0));
      String[] lineOne = firstLine.split("\\s+");
      int[] firstOneLine = new int[4];
      for(int i = 0; i<4;i++) {
    	  firstOneLine[i] = Integer.parseInt(lineOne[i]);
    	  System.out.println(firstOneLine[i]);
      }
      while (myReader.hasNextLine()) {
    	  String myData = myReader.nextLine();
    	  String[] myDataSplit = myData.split("\\s+");
    	  if(myDataSplit.length>max) {
    		  max = myDataSplit.length;
    	  }
      }
      myReader.close();
      System.out.println(max);
      max = max + 1;
      numberOfPizzas = firstOneLine[0];
      Scanner myReaderTwo = new Scanner(myObj);
      myReaderTwo.nextLine();
      pizzaData = new String[numberOfPizzas][max];
      while (myReaderTwo.hasNextLine()&&count!=numberOfPizzas) {
        String data = myReaderTwo.nextLine();
        String[] splitData = data.split("\\s+");
        pizzaData[count][0] = String.valueOf(count);
        for(int i=0;i<splitData.length;i++) {
        	pizzaData[count][i+1] = splitData[i];
        	System.out.print(pizzaData[count][i+1]);
        }
        count++;
        System.out.println("\n");
      }
      myReaderTwo.close();
      String temp;
      int valueOne;
      int valueTwo;
      //String[][] sortedPizzaData = new String[numberOfPizzas][max];
      for(int k=0;k<numberOfPizzas;k++) {
      for(int i=0;i<numberOfPizzas-1;i++) {
      	valueOne = Integer.parseInt(pizzaData[i][1]);
  		valueTwo = Integer.parseInt(pizzaData[i+1][1]);
  		if(valueOne<valueTwo) {
      	for(int j=0;j<max;j++) {
      			temp = pizzaData[i][j];
      			pizzaData[i][j] = pizzaData[i+1][j];
      			pizzaData[i+1][j] = temp;
      		}
      	}
      }
      }
      for(int i=0;i<numberOfPizzas;i++) {
  		for(int j=0;j<max;j++) {
  			if(pizzaData[i][j]!=null) System.out.print(pizzaData[i][j]);
  			System.out.print(" ");
  		}
  		System.out.print("\n");	
  	}
      int[] teamCounter = firstOneLine;
      int[][] solutionArray = new int[(numberOfPizzas/2)+1][5];
      ArrayList<String[]> v = new ArrayList<String[]>(numberOfPizzas);
      for(int i=0;i<numberOfPizzas;i++) {
    		for(int j=0;j<max;j++) {
    			v.add(i,pizzaData[i]);
    		}
    		System.out.println(v.size());
   }
   //   for(int i=0;i<numberOfPizzas;i++) {
   // 	  for(int j=0;j<max;j++) {
  //			System.out.print(v.get(i)[j]);
  //    }
  //    }
   int maxToppings=0;
   int toppingsCount = 0;
   int bestPizzaIndex = 0;
   int howManyOrders = 0;
   Boolean goodTopping = true;
   ArrayList<String> addedPizzas = new ArrayList<String>();
   String[] bestPizza;
   String[][] pizzaMemory = new String[4][max];
   int pizzaCounter = 0;
   for(int n=1;n<4;n++) {
		  while((teamCounter[0]>=n+1)&&(teamCounter[n]>0)) {//after completing an order check that there are enough pizzas
			  //left for another order and check that that there is a team left of the current size
			  //if the pizzas insufficient this fails and the for loop ends
			  //if the issue is the team size, then this while loop will be checked twice and probably run the second time
			  //when there is a new team size available
    	  solutionArray[howManyOrders+1][0] = n+1;//n+1 is the team size
    	  System.out.print(n+1);
    	  solutionArray[howManyOrders+1][1] = Integer.parseInt(v.get(0)[0]);
    	  System.out.print(solutionArray[howManyOrders+1][1]);
    	  for(int i=2;i<max;i++) {
    		  if(v.get(0)[i]!=null)addedPizzas.add(v.get(0)[i]);//adds the toppings to addedPizzas
    	  }
    	  //pizzaMemory[pizzaCounter] = v.get(0);
    	  pizzaCounter++;
    	  v.remove(0);
    	  teamCounter[0]--;
    	  while(pizzaCounter<n+1) {
    	  for(int i=0;i<teamCounter[0];i++) {
    		  for(int k=2;k<max;k++) { 
    		    	  for(int j=0;j<addedPizzas.size();j++) {
    		    		  //System.out.println("%" + addedPizzas.size() + "%");
    		    			  //System.out.println("*" + addedPizzas.get(j) + v.get(i)[k] + "*");
    		  			if(addedPizzas.get(j).equals(v.get(i)[k])||v.get(i)[k]==null) { 
    		  			goodTopping = false;
    		  			}
    		  			
    		      }
    		    		if(goodTopping==true) {//all the toppings from the first pizza have been checked against the second pizza
      		  				toppingsCount++;//if goodTopping survived we can add the topping from the second pizza to our count
      		  			//System.out.println("\n&" + toppingsCount + "&");
      		  			}
    		    		goodTopping = true;//reset it for the next topping on the second pizza
    	  }   
    		    	  if(toppingsCount>maxToppings || maxToppings==0) {
    	    		    	maxToppings = toppingsCount;
    	    		    	bestPizza = v.get(i);//best pizza is stored
    	    		    	bestPizzaIndex = i;
    	    		  }
    		    	  toppingsCount = 0;
    		    	  
      }
    	  for(int i=2;i<max;i++) {
    		  if(v.get(0)[i]!=null) addedPizzas.add(v.get(bestPizzaIndex)[i]);//adds the toppings to addedPizzas
    	  }
    	  solutionArray[howManyOrders+1][pizzaCounter] = Integer.parseInt(v.get(bestPizzaIndex)[0]);
    	  System.out.print(v.get(bestPizzaIndex)[0]);
	      v.remove(bestPizzaIndex);
	      maxToppings=0;
	      teamCounter[0]--;
	      pizzaCounter++;
    	  //solutionArray[][];
		  //v.get(0)[j];
    	  }
    	  teamCounter[n]--;
    	  pizzaCounter = 0;
    	  howManyOrders++;
    	  addedPizzas.clear();
    	  addedPizzas.trimToSize();
    	  System.out.println();
    }
   }
   solutionArray[0][0] = howManyOrders;
   System.out.print(howManyOrders);
   
   
   
   
   
   
   
   
   
   
      return pizzaData;
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
      return pizzaData;
    }
    
}
}
